{
    "summary": "The CriticAgent class generates system and human messages, evaluates agent status based on mode (\"manual\" or \"auto\"), and checks task success using user or AI input. It is part of the Voyager project.",
    "details": [
        {
            "comment": "The code defines a class named `CriticAgent`, which initializes a ChatOpenAI language model and provides methods for rendering system and human messages based on events, task, context, and chest observation. The agent's mode can be set to \"auto\" or \"manual\".",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/critic.py\":0-31",
            "content": "from voyager.prompts import load_prompt\nfrom voyager.utils.json_utils import fix_and_parse_json\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.schema import HumanMessage, SystemMessage\nclass CriticAgent:\n    def __init__(\n        self,\n        model_name=\"gpt-3.5-turbo\",\n        temperature=0,\n        request_timout=120,\n        mode=\"auto\",\n    ):\n        self.llm = ChatOpenAI(\n            model_name=model_name,\n            temperature=temperature,\n            request_timeout=request_timout,\n        )\n        assert mode in [\"auto\", \"manual\"]\n        self.mode = mode\n    def render_system_message(self):\n        system_message = SystemMessage(content=load_prompt(\"critic\"))\n        return system_message\n    def render_human_message(self, *, events, task, context, chest_observation):\n        assert events[-1][0] == \"observe\", \"Last event must be observe\"\n        biome = events[-1][1][\"status\"][\"biome\"]\n        time_of_day = events[-1][1][\"status\"][\"timeOfDay\"]\n        voxels = events[-1][1][\"voxels\"]\n        health = events[-1][1][\"status\"][\"health\"]"
        },
        {
            "comment": "This code is capturing the agent's current status and events to construct an observation for evaluation. It checks for errors, retrieves biome, time of day, nearby blocks, health, hunger, and position information from events, and formats them into a string.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/critic.py\":32-59",
            "content": "        hunger = events[-1][1][\"status\"][\"food\"]\n        position = events[-1][1][\"status\"][\"position\"]\n        equipment = events[-1][1][\"status\"][\"equipment\"]\n        inventory_used = events[-1][1][\"status\"][\"inventoryUsed\"]\n        inventory = events[-1][1][\"inventory\"]\n        for i, (event_type, event) in enumerate(events):\n            if event_type == \"onError\":\n                print(f\"\\033[31mCritic Agent: Error occurs {event['onError']}\\033[0m\")\n                return None\n        observation = \"\"\n        observation += f\"Biome: {biome}\\n\\n\"\n        observation += f\"Time: {time_of_day}\\n\\n\"\n        if voxels:\n            observation += f\"Nearby blocks: {', '.join(voxels)}\\n\\n\"\n        else:\n            observation += f\"Nearby blocks: None\\n\\n\"\n        observation += f\"Health: {health:.1f}/20\\n\\n\"\n        observation += f\"Hunger: {hunger:.1f}/20\\n\\n\"\n        observation += f\"Position: x={position['x']:.1f}, y={position['y']:.1f}, z={position['z']:.1f}\\n\\n\"\n        observation += f\"Equipment: {equipment}\\n\\n\""
        },
        {
            "comment": "The code snippet contains two functions: \"human_check_task_success\" and \"ai_check_task_success\". The first function prompts the user to confirm if a task is successful and also asks for their critique. It repeats until the user confirms their response. The second function automatically determines whether a task was successful or not, based on the input provided by the AI system. Both functions return either True or False for success, along with the user's critique.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/critic.py\":61-90",
            "content": "        if inventory:\n            observation += f\"Inventory ({inventory_used}/36): {inventory}\\n\\n\"\n        else:\n            observation += f\"Inventory ({inventory_used}/36): Empty\\n\\n\"\n        observation += chest_observation\n        observation += f\"Task: {task}\\n\\n\"\n        if context:\n            observation += f\"Context: {context}\\n\\n\"\n        else:\n            observation += f\"Context: None\\n\\n\"\n        print(f\"\\033[31m****Critic Agent human message****\\n{observation}\\033[0m\")\n        return HumanMessage(content=observation)\n    def human_check_task_success(self):\n        confirmed = False\n        success = False\n        critique = \"\"\n        while not confirmed:\n            success = input(\"Success? (y/n)\")\n            success = success.lower() == \"y\"\n            critique = input(\"Enter your critique:\")\n            print(f\"Success: {success}\\nCritique: {critique}\")\n            confirmed = input(\"Confirm? (y/n)\") in [\"y\", \"\"]\n        return success, critique\n    def ai_check_task_success(self, messages, max_retries=5):"
        },
        {
            "comment": "The code checks the Critic Agent's response and tries to parse it as JSON. If parsing fails, it prints an error message and retries up to a specified number of times. If the \"success\" field is not present in the parsed response or if \"critique\" is missing, default values are set before returning success and critique.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/critic.py\":91-118",
            "content": "        if max_retries == 0:\n            print(\n                \"\\033[31mFailed to parse Critic Agent response. Consider updating your prompt.\\033[0m\"\n            )\n            return False, \"\"\n        if messages[1] is None:\n            return False, \"\"\n        critic = self.llm(messages).content\n        print(f\"\\033[31m****Critic Agent ai message****\\n{critic}\\033[0m\")\n        try:\n            response = fix_and_parse_json(critic)\n            assert response[\"success\"] in [True, False]\n            if \"critique\" not in response:\n                response[\"critique\"] = \"\"\n            return response[\"success\"], response[\"critique\"]\n        except Exception as e:\n            print(f\"\\033[31mError parsing critic response: {e} Trying again!\\033[0m\")\n            return self.ai_check_task_success(\n                messages=messages,\n                max_retries=max_retries - 1,\n            )\n    def check_task_success(\n        self, *, events, task, context, chest_observation, max_retries=5\n    ):\n        human_message = self.render_human_message("
        },
        {
            "comment": "This code is a part of the critic agent class in the Voyager project. It initializes an instance with given events, task, context, and chest_observation. Then it creates a list of messages containing system and human messages. If the mode is set to \"manual\", it calls the human_check_task_success() function, otherwise if the mode is \"auto\", it calls ai_check_task_success() with the messages and max_retries as arguments. For any other invalid mode, it raises a ValueError.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/critic.py\":119-137",
            "content": "            events=events,\n            task=task,\n            context=context,\n            chest_observation=chest_observation,\n        )\n        messages = [\n            self.render_system_message(),\n            human_message,\n        ]\n        if self.mode == \"manual\":\n            return self.human_check_task_success()\n        elif self.mode == \"auto\":\n            return self.ai_check_task_success(\n                messages=messages, max_retries=max_retries\n            )\n        else:\n            raise ValueError(f\"Invalid critic agent mode: {self.mode}\")"
        }
    ]
}