{
    "summary": "The Voyager class handles AI communication, environment setup, agent creation, rollout configuration, action updates, messaging, result recording, exception management, and prints tasks completion/failure with ANSI coloring.",
    "details": [
        {
            "comment": "The code defines a class called \"Voyager\" that serves as the main module for an AI agent. It includes various attributes and functions related to the environment, agents (ActionAgent, CriticAgent, CurriculumAgent), SkillManager, and other settings such as server and model configurations. The class's purpose is to handle communication between the user, agent, and environment, and manage agent learning and decision-making processes.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":0-34",
            "content": "import copy\nimport json\nimport os\nimport time\nfrom typing import Dict\nimport voyager.utils as U\nfrom .env import VoyagerEnv\nfrom .agents import ActionAgent\nfrom .agents import CriticAgent\nfrom .agents import CurriculumAgent\nfrom .agents import SkillManager\n# TODO: remove event memory\nclass Voyager:\n    def __init__(\n        self,\n        mc_port: int = None,\n        azure_login: Dict[str, str] = None,\n        server_port: int = 3000,\n        openai_api_key: str = None,\n        env_wait_ticks: int = 20,\n        env_request_timeout: int = 600,\n        max_iterations: int = 160,\n        reset_placed_if_failed: bool = False,\n        action_agent_model_name: str = \"gpt-4\",\n        action_agent_temperature: float = 0,\n        action_agent_task_max_retries: int = 4,\n        action_agent_show_chat_log: bool = True,\n        action_agent_show_execution_error: bool = True,\n        curriculum_agent_model_name: str = \"gpt-4\",\n        curriculum_agent_temperature: float = 0,\n        curriculum_agent_qa_model_name: str = \"gpt-3.5-turbo\","
        },
        {
            "comment": "The code defines a class for Voyager with various parameters. The action agent is for iterative prompting, the curriculum agent for automatic curriculum, critic agent for self-verification, and skill manager for skill library as per the paper.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":35-56",
            "content": "        curriculum_agent_qa_temperature: float = 0,\n        curriculum_agent_warm_up: Dict[str, int] = None,\n        curriculum_agent_core_inventory_items: str = r\".*_log|.*_planks|stick|crafting_table|furnace\"\n        r\"|cobblestone|dirt|coal|.*_pickaxe|.*_sword|.*_axe\",\n        curriculum_agent_mode: str = \"auto\",\n        critic_agent_model_name: str = \"gpt-4\",\n        critic_agent_temperature: float = 0,\n        critic_agent_mode: str = \"auto\",\n        skill_manager_model_name: str = \"gpt-3.5-turbo\",\n        skill_manager_temperature: float = 0,\n        skill_manager_retrieval_top_k: int = 5,\n        openai_api_request_timeout: int = 240,\n        ckpt_dir: str = \"ckpt\",\n        skill_library_dir: str = None,\n        resume: bool = False,\n    ):\n        \"\"\"\n        The main class for Voyager.\n        Action agent is the iterative prompting mechanism in paper.\n        Curriculum agent is the automatic curriculum in paper.\n        Critic agent is the self-verification in paper.\n        Skill manager is the skill library in paper."
        },
        {
            "comment": "This code defines function parameters for a Minecraft bot. Parameters include the minecraft port, Azure login credentials, Mineflayer port, OpenAI API key, wait time for each step, timeout for execution, reset option, and model names/temperatures for action and curriculum agents.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":57-71",
            "content": "        :param mc_port: minecraft in-game port\n        :param azure_login: minecraft login config\n        :param server_port: mineflayer port\n        :param openai_api_key: openai api key\n        :param env_wait_ticks: how many ticks at the end each step will wait, if you found some chat log missing,\n        you should increase this value\n        :param env_request_timeout: how many seconds to wait for each step, if the code execution exceeds this time,\n        python side will terminate the connection and need to be resumed\n        :param reset_placed_if_failed: whether to reset placed blocks if failed, useful for building task\n        :param action_agent_model_name: action agent model name\n        :param action_agent_temperature: action agent temperature\n        :param action_agent_task_max_retries: how many times to retry if failed\n        :param curriculum_agent_model_name: curriculum agent model name\n        :param curriculum_agent_temperature: curriculum agent temperature\n        :param curriculum_agent_qa_model_name: curriculum agent qa model name"
        },
        {
            "comment": "This code is defining the parameters for creating a curriculum and setting up agents. The curriculum_agent has temperature, warm-up, and mode parameters while the critic_agent has its own temperature and mode. It also provides available keys for different game attributes like context, biome, time, etc. The \"reached in warm up\" statement suggests that some items will only appear later in the learning process.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":72-93",
            "content": "        :param curriculum_agent_qa_temperature: curriculum agent qa temperature\n        :param curriculum_agent_warm_up: info will show in curriculum human message\n        if completed task larger than the value in dict, available keys are:\n        {\n            \"context\": int,\n            \"biome\": int,\n            \"time\": int,\n            \"other_blocks\": int,\n            \"nearby_entities\": int,\n            \"health\": int,\n            \"hunger\": int,\n            \"position\": int,\n            \"equipment\": int,\n            \"chests\": int,\n            \"optional_inventory_items\": int,\n        }\n        :param curriculum_agent_core_inventory_items: only show these items in inventory before optional_inventory_items\n        reached in warm up\n        :param curriculum_agent_mode: \"auto\" for automatic curriculum, \"manual\" for human curriculum\n        :param critic_agent_model_name: critic agent model name\n        :param critic_agent_temperature: critic agent temperature\n        :param critic_agent_mode: \"auto\" for automatic critic ,\"manual\" for human critic"
        },
        {
            "comment": "This code initializes a VoyagerEnv environment, sets environment variables, and initializes an ActionAgent. The environment is initialized with given parameters like mc_port, azure_login, server_port, request_timeout, env_request_timeout, reset_placed_if_failed, and max_iterations. OpenAI API key is set using os.environ. An ActionAgent is initialized with model_name and temperature.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":94-119",
            "content": "        :param skill_manager_model_name: skill manager model name\n        :param skill_manager_temperature: skill manager temperature\n        :param skill_manager_retrieval_top_k: how many skills to retrieve for each task\n        :param openai_api_request_timeout: how many seconds to wait for openai api\n        :param ckpt_dir: checkpoint dir\n        :param skill_library_dir: skill library dir\n        :param resume: whether to resume from checkpoint\n        \"\"\"\n        # init env\n        self.env = VoyagerEnv(\n            mc_port=mc_port,\n            azure_login=azure_login,\n            server_port=server_port,\n            request_timeout=env_request_timeout,\n        )\n        self.env_wait_ticks = env_wait_ticks\n        self.reset_placed_if_failed = reset_placed_if_failed\n        self.max_iterations = max_iterations\n        # set openai api key\n        os.environ[\"OPENAI_API_KEY\"] = openai_api_key\n        # init agents\n        self.action_agent = ActionAgent(\n            model_name=action_agent_model_name,\n            temperature=action_agent_temperature,"
        },
        {
            "comment": "The code initializes three agent instances: `action_agent`, `curriculum_agent`, and `critic_agent`. Each agent is initialized with specific parameters, such as model names, temperatures, request timeouts, checkpoint directories, modes, and warm-up values. These agents are likely used for different tasks within the AI system.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":120-142",
            "content": "            request_timout=openai_api_request_timeout,\n            ckpt_dir=ckpt_dir,\n            resume=resume,\n            chat_log=action_agent_show_chat_log,\n            execution_error=action_agent_show_execution_error,\n        )\n        self.action_agent_task_max_retries = action_agent_task_max_retries\n        self.curriculum_agent = CurriculumAgent(\n            model_name=curriculum_agent_model_name,\n            temperature=curriculum_agent_temperature,\n            qa_model_name=curriculum_agent_qa_model_name,\n            qa_temperature=curriculum_agent_qa_temperature,\n            request_timout=openai_api_request_timeout,\n            ckpt_dir=ckpt_dir,\n            resume=resume,\n            mode=curriculum_agent_mode,\n            warm_up=curriculum_agent_warm_up,\n            core_inventory_items=curriculum_agent_core_inventory_items,\n        )\n        self.critic_agent = CriticAgent(\n            model_name=critic_agent_model_name,\n            temperature=critic_agent_temperature,\n            request_timout=openai_api_request_timeout,"
        },
        {
            "comment": "This code initializes a Voyager agent with the specified critic agent mode and skill manager parameters. It also creates an event recorder and sets up variables for rollout. The reset function resets the agent's state with the given task and context, optionally resetting the environment as well.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":143-171",
            "content": "            mode=critic_agent_mode,\n        )\n        self.skill_manager = SkillManager(\n            model_name=skill_manager_model_name,\n            temperature=skill_manager_temperature,\n            retrieval_top_k=skill_manager_retrieval_top_k,\n            request_timout=openai_api_request_timeout,\n            ckpt_dir=skill_library_dir if skill_library_dir else ckpt_dir,\n            resume=True if resume or skill_library_dir else False,\n        )\n        self.recorder = U.EventRecorder(ckpt_dir=ckpt_dir, resume=resume)\n        self.resume = resume\n        # init variables for rollout\n        self.action_agent_rollout_num_iter = -1\n        self.task = None\n        self.context = \"\"\n        self.messages = None\n        self.conversations = []\n        self.last_events = None\n    def reset(self, task, context=\"\", reset_env=True):\n        self.action_agent_rollout_num_iter = 0\n        self.task = task\n        self.context = context\n        if reset_env:\n            self.env.reset(\n                options={\n                    \"mode\": \"soft\","
        },
        {
            "comment": "This code is setting up the environment for an agent, defining difficulty level and retrieving skills. It then renders a system message and a human message using the ActionAgent. The messages are stored in self.messages and their length is checked to ensure there are two messages. A debug statement is also printed to display the human message content.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":172-195",
            "content": "                    \"wait_ticks\": self.env_wait_ticks,\n                }\n            )\n        difficulty = (\n            \"easy\" if len(self.curriculum_agent.completed_tasks) > 15 else \"peaceful\"\n        )\n        # step to peek an observation\n        events = self.env.step(\n            \"bot.chat(`/time set ${getNextTime()}`);\\n\"\n            + f\"bot.chat('/difficulty {difficulty}');\"\n        )\n        skills = self.skill_manager.retrieve_skills(query=self.context)\n        print(\n            f\"\\033[33mRender Action Agent system message with {len(skills)} skills\\033[0m\"\n        )\n        system_message = self.action_agent.render_system_message(skills=skills)\n        human_message = self.action_agent.render_human_message(\n            events=events, code=\"\", task=self.task, context=context, critique=\"\"\n        )\n        self.messages = [system_message, human_message]\n        print(\n            f\"\\033[32m****Action Agent human message****\\n{human_message.content}\\033[0m\"\n        )\n        assert len(self.messages) == 2"
        },
        {
            "comment": "This code initializes an empty conversations list, returns the messages, closes the environment, steps through the agent's actions, and updates the critic agent's success check.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":196-220",
            "content": "        self.conversations = []\n        return self.messages\n    def close(self):\n        self.env.close()\n    def step(self):\n        if self.action_agent_rollout_num_iter < 0:\n            raise ValueError(\"Agent must be reset before stepping\")\n        ai_message = self.action_agent.llm(self.messages)\n        print(f\"\\033[34m****Action Agent ai message****\\n{ai_message.content}\\033[0m\")\n        self.conversations.append(\n            (self.messages[0].content, self.messages[1].content, ai_message.content)\n        )\n        parsed_result = self.action_agent.process_ai_message(message=ai_message)\n        success = False\n        if isinstance(parsed_result, dict):\n            code = parsed_result[\"program_code\"] + \"\\n\" + parsed_result[\"exec_code\"]\n            events = self.env.step(\n                code,\n                programs=self.skill_manager.programs,\n            )\n            self.recorder.record(events, self.task)\n            self.action_agent.update_chest_memory(events[-1][1][\"nearbyChests\"])\n            success, critique = self.critic_agent.check_task_success("
        },
        {
            "comment": "This code is creating an event object and calling a step function to execute it. If the execution fails, it reverts all placing events in the last step by using givePlacedItemBack function and updating inventory.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":221-242",
            "content": "                events=events,\n                task=self.task,\n                context=self.context,\n                chest_observation=self.action_agent.render_chest_observation(),\n                max_retries=5,\n            )\n            if self.reset_placed_if_failed and not success:\n                # revert all the placing event in the last step\n                blocks = []\n                positions = []\n                for event_type, event in events:\n                    if event_type == \"onSave\" and event[\"onSave\"].endswith(\"_placed\"):\n                        block = event[\"onSave\"].split(\"_placed\")[0]\n                        position = event[\"status\"][\"position\"]\n                        blocks.append(block)\n                        positions.append(position)\n                new_events = self.env.step(\n                    f\"await givePlacedItemBack(bot, {U.json_dumps(blocks)}, {U.json_dumps(positions)})\",\n                    programs=self.skill_manager.programs,\n                )\n                events[-1][1][\"inventory\"] = new_events[-1][1][\"inventory\"]"
        },
        {
            "comment": "The code updates the events list, retrieves new skills using the SkillManager, generates system and human messages, handles failed parsing attempts, records results, prints a message and increments rollout number if max retries are reached.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":243-266",
            "content": "                events[-1][1][\"voxels\"] = new_events[-1][1][\"voxels\"]\n            new_skills = self.skill_manager.retrieve_skills(\n                query=self.context\n                + \"\\n\\n\"\n                + self.action_agent.summarize_chatlog(events)\n            )\n            system_message = self.action_agent.render_system_message(skills=new_skills)\n            human_message = self.action_agent.render_human_message(\n                events=events,\n                code=parsed_result[\"program_code\"],\n                task=self.task,\n                context=self.context,\n                critique=critique,\n            )\n            self.last_events = copy.deepcopy(events)\n            self.messages = [system_message, human_message]\n        else:\n            assert isinstance(parsed_result, str)\n            self.recorder.record([], self.task)\n            print(f\"\\033[34m{parsed_result} Trying again!\\033[0m\")\n        assert len(self.messages) == 2\n        self.action_agent_rollout_num_iter += 1\n        done = (\n            self.action_agent_rollout_num_iter >= self.action_agent_task_max_retries"
        },
        {
            "comment": "The code snippet defines a class with methods for rollout and learn. The rollout method performs continuous steps until done, returning messages, reward, and information. If successful, it retrieves program_code and program_name from parsed result. Otherwise, it prints the last human message. The learn method resumes learning if self.resume is true.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":267-295",
            "content": "            or success\n        )\n        info = {\n            \"task\": self.task,\n            \"success\": success,\n            \"conversations\": self.conversations,\n        }\n        if success:\n            assert (\n                \"program_code\" in parsed_result and \"program_name\" in parsed_result\n            ), \"program and program_name must be returned when success\"\n            info[\"program_code\"] = parsed_result[\"program_code\"]\n            info[\"program_name\"] = parsed_result[\"program_name\"]\n        else:\n            print(\n                f\"\\033[32m****Action Agent human message****\\n{self.messages[-1].content}\\033[0m\"\n            )\n        return self.messages, 0, done, info\n    def rollout(self, *, task, context, reset_env=True):\n        self.reset(task=task, context=context, reset_env=reset_env)\n        while True:\n            messages, reward, done, info = self.step()\n            if done:\n                break\n        return messages, reward, done, info\n    def learn(self, reset_env=True):\n        if self.resume:"
        },
        {
            "comment": "The code resets the environment and handles inventory management depending on a condition. It then checks if the iteration limit is reached, proposes the next task using curriculum agent, and prints the start of the task with maximum retries specified.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":296-325",
            "content": "            # keep the inventory\n            self.env.reset(\n                options={\n                    \"mode\": \"soft\",\n                    \"wait_ticks\": self.env_wait_ticks,\n                }\n            )\n        else:\n            # clear the inventory\n            self.env.reset(\n                options={\n                    \"mode\": \"hard\",\n                    \"wait_ticks\": self.env_wait_ticks,\n                }\n            )\n            self.resume = True\n        self.last_events = self.env.step(\"\")\n        while True:\n            if self.recorder.iteration > self.max_iterations:\n                print(\"Iteration limit reached\")\n                break\n            task, context = self.curriculum_agent.propose_next_task(\n                events=self.last_events,\n                chest_observation=self.action_agent.render_chest_observation(),\n                max_retries=5,\n            )\n            print(\n                f\"\\033[35mStarting task {task} for at most {self.action_agent_task_max_retries} times\\033[0m\"\n            )"
        },
        {
            "comment": "Code attempts to perform a rollout task, but if an exception occurs, it sleeps for 3 seconds, resets the bot status with specific options, prints an error message, and returns information with \"success\" set to False.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":326-349",
            "content": "            try:\n                messages, reward, done, info = self.rollout(\n                    task=task,\n                    context=context,\n                    reset_env=reset_env,\n                )\n            except Exception as e:\n                time.sleep(3)  # wait for mineflayer to exit\n                info = {\n                    \"task\": task,\n                    \"success\": False,\n                }\n                # reset bot status here\n                self.last_events = self.env.reset(\n                    options={\n                        \"mode\": \"hard\",\n                        \"wait_ticks\": self.env_wait_ticks,\n                        \"inventory\": self.last_events[-1][1][\"inventory\"],\n                        \"equipment\": self.last_events[-1][1][\"status\"][\"equipment\"],\n                        \"position\": self.last_events[-1][1][\"status\"][\"position\"],\n                    }\n                )\n                # use red color background to print the error\n                print(\"Your last round rollout terminated due to error:\")"
        },
        {
            "comment": "The code includes functions for handling tasks, adding new skills, updating exploration progress, and retrieving completed and failed tasks. It also handles the environment reset and inference.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":350-379",
            "content": "                print(f\"\\033[41m{e}\\033[0m\")\n            if info[\"success\"]:\n                self.skill_manager.add_new_skill(info)\n            self.curriculum_agent.update_exploration_progress(info)\n            print(\n                f\"\\033[35mCompleted tasks: {', '.join(self.curriculum_agent.completed_tasks)}\\033[0m\"\n            )\n            print(\n                f\"\\033[35mFailed tasks: {', '.join(self.curriculum_agent.failed_tasks)}\\033[0m\"\n            )\n        return {\n            \"completed_tasks\": self.curriculum_agent.completed_tasks,\n            \"failed_tasks\": self.curriculum_agent.failed_tasks,\n            \"skills\": self.skill_manager.skills,\n        }\n    def decompose_task(self, task):\n        if not self.last_events:\n            self.last_events = self.env.reset(\n                options={\n                    \"mode\": \"hard\",\n                    \"wait_ticks\": self.env_wait_ticks,\n                }\n            )\n        return self.curriculum_agent.decompose_task(task, self.last_events)\n    def inference(self, task=None, sub_goals=[], reset_mode=\"hard\", reset_env=True):"
        },
        {
            "comment": "Checks if either task or sub_goals are provided, and resets the environment. Then iterates through sub_goals, prints current goal and runs rollout for each one, updating exploration progress along the way.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":380-404",
            "content": "        if not task and not sub_goals:\n            raise ValueError(\"Either task or sub_goals must be provided\")\n        if not sub_goals:\n            sub_goals = self.decompose_task(task)\n        self.env.reset(\n            options={\n                \"mode\": reset_mode,\n                \"wait_ticks\": self.env_wait_ticks,\n            }\n        )\n        self.curriculum_agent.completed_tasks = []\n        self.curriculum_agent.failed_tasks = []\n        self.last_events = self.env.step(\"\")\n        while self.curriculum_agent.progress < len(sub_goals):\n            next_task = sub_goals[self.curriculum_agent.progress]\n            context = self.curriculum_agent.get_task_context(next_task)\n            print(\n                f\"\\033[35mStarting task {next_task} for at most {self.action_agent_task_max_retries} times\\033[0m\"\n            )\n            messages, reward, done, info = self.rollout(\n                task=next_task,\n                context=context,\n                reset_env=reset_env,\n            )\n            self.curriculum_agent.update_exploration_progress(info)"
        },
        {
            "comment": "This code is printing the completed and failed tasks in a formatted way using ANSI escape sequences for coloring.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/voyager.py\":405-410",
            "content": "            print(\n                f\"\\033[35mCompleted tasks: {', '.join(self.curriculum_agent.completed_tasks)}\\033[0m\"\n            )\n            print(\n                f\"\\033[35mFailed tasks: {', '.join(self.curriculum_agent.failed_tasks)}\\033[0m\"\n            )"
        }
    ]
}