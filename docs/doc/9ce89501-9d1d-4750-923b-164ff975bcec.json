{
    "summary": "This function enables bot-controlled chest interaction, allowing users to teleport, open/close chests, list items, emit events, and search by name.",
    "details": [
        {
            "comment": "Function to retrieve items from a chest at specified position using Vec3. Moves the bot to the chest location, opens it, and retrieves specific items from the container. Displays error messages if an item is not found or insufficient quantity exists in the chest. Closes the chest after completion.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/control_primitives/useChest.js\":0-30",
            "content": "async function getItemFromChest(bot, chestPosition, itemsToGet) {\n    // return if chestPosition is not Vec3\n    if (!(chestPosition instanceof Vec3)) {\n        bot.chat(\"chestPosition for getItemFromChest must be a Vec3\");\n        return;\n    }\n    await moveToChest(bot, chestPosition);\n    const chestBlock = bot.blockAt(chestPosition);\n    const chest = await bot.openContainer(chestBlock);\n    for (const name in itemsToGet) {\n        const itemByName = mcData.itemsByName[name];\n        if (!itemByName) {\n            bot.chat(`No item named ${name}`);\n            continue;\n        }\n        const item = chest.findContainerItem(itemByName.id);\n        if (!item) {\n            bot.chat(`I don't see ${name} in this chest`);\n            continue;\n        }\n        try {\n            await chest.withdraw(item.type, null, itemsToGet[name]);\n        } catch (err) {\n            bot.chat(`Not enough ${name} in chest.`);\n        }\n    }\n    await closeChest(bot, chestBlock);\n}\nasync function depositItemIntoChest(bot, chestPosition, itemsToDeposit) {"
        },
        {
            "comment": "Code snippet checks if chestPosition is a Vec3, then moves to the chest position, opens the chest, iterates through itemsToDeposit, deposits each item into the chest if available, and finally closes the chest.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/control_primitives/useChest.js\":31-61",
            "content": "    // return if chestPosition is not Vec3\n    if (!(chestPosition instanceof Vec3)) {\n        throw new Error(\n            \"chestPosition for depositItemIntoChest must be a Vec3\"\n        );\n    }\n    await moveToChest(bot, chestPosition);\n    const chestBlock = bot.blockAt(chestPosition);\n    const chest = await bot.openContainer(chestBlock);\n    for (const name in itemsToDeposit) {\n        const itemByName = mcData.itemsByName[name];\n        if (!itemByName) {\n            bot.chat(`No item named ${name}`);\n            continue;\n        }\n        const item = bot.inventory.findInventoryItem(itemByName.id);\n        if (!item) {\n            bot.chat(`No ${name} in inventory`);\n            continue;\n        }\n        try {\n            await chest.deposit(item.type, null, itemsToDeposit[name]);\n        } catch (err) {\n            bot.chat(`Not enough ${name} in inventory.`);\n        }\n    }\n    await closeChest(bot, chestBlock);\n}\nasync function checkItemInsideChest(bot, chestPosition) {\n    // return if chestPosition is not Vec3"
        },
        {
            "comment": "Code snippet handles depositing an item into a chest. First, it ensures the 'chestPosition' is a Vec3 instance and throws an error if not. It then moves the bot to the specified chest position using teleportation if it's more than 32 blocks away. After reaching the chest, it checks whether the block at that position is indeed a chest or not. If not, it removes the chest and throws an error with the current block name.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/control_primitives/useChest.js\":62-93",
            "content": "    if (!(chestPosition instanceof Vec3)) {\n        throw new Error(\n            \"chestPosition for depositItemIntoChest must be a Vec3\"\n        );\n    }\n    await moveToChest(bot, chestPosition);\n    const chestBlock = bot.blockAt(chestPosition);\n    await bot.openContainer(chestBlock);\n    await closeChest(bot, chestBlock);\n}\nasync function moveToChest(bot, chestPosition) {\n    if (!(chestPosition instanceof Vec3)) {\n        throw new Error(\n            \"chestPosition for depositItemIntoChest must be a Vec3\"\n        );\n    }\n    if (chestPosition.distanceTo(bot.entity.position) > 32) {\n        bot.chat(\n            `/tp ${chestPosition.x} ${chestPosition.y} ${chestPosition.z}`\n        );\n        await bot.waitForTicks(20);\n    }\n    const chestBlock = bot.blockAt(chestPosition);\n    if (chestBlock.name !== \"chest\") {\n        bot.emit(\"removeChest\", chestPosition);\n        throw new Error(\n            `No chest at ${chestPosition}, it is ${chestBlock.name}`\n        );\n    }\n    await bot.pathfinder.goto(\n        new GoalLookAtBlock(chestBlock.position, bot.world, {})"
        },
        {
            "comment": "This code defines functions for interacting with chests in a game. It opens the chest, lists items inside and emits corresponding events, closes the chest after interaction, and provides an itemByName function to find an item by name from a list of items.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/control_primitives/useChest.js\":94-132",
            "content": "    );\n    return chestBlock;\n}\nasync function listItemsInChest(bot, chestBlock) {\n    const chest = await bot.openContainer(chestBlock);\n    const items = chest.containerItems();\n    if (items.length > 0) {\n        const itemNames = items.reduce((acc, obj) => {\n            if (acc[obj.name]) {\n                acc[obj.name] += obj.count;\n            } else {\n                acc[obj.name] = obj.count;\n            }\n            return acc;\n        }, {});\n        bot.emit(\"closeChest\", itemNames, chestBlock.position);\n    } else {\n        bot.emit(\"closeChest\", {}, chestBlock.position);\n    }\n    return chest;\n}\nasync function closeChest(bot, chestBlock) {\n    try {\n        const chest = await listItemsInChest(bot, chestBlock);\n        await chest.close();\n    } catch (err) {\n        await bot.closeWindow(chestBlock);\n    }\n}\nfunction itemByName(items, name) {\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        if (item && item.name === name) return item;\n    }\n    return null;\n}"
        }
    ]
}