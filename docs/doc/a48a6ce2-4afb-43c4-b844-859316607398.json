{
    "summary": "The code initializes a SkillManager class, sets up language model (ChatOpenAI), creates directories for skill storage, loads control primitives, handles checkpoint resuming, manages skills, and utilizes VectorDB for data persistence with conflict resolution. The method retrieves top K skills based on query using vector database similarity search and returns their codes.",
    "details": [
        {
            "comment": "The code initializes a SkillManager class, sets up the language model (ChatOpenAI), creates directories for skill storage, loads control primitives, and handles resuming from previous checkpoints if necessary.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/skill.py\":0-33",
            "content": "import os\nimport voyager.utils as U\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.schema import HumanMessage, SystemMessage\nfrom langchain.vectorstores import Chroma\nfrom voyager.prompts import load_prompt\nfrom voyager.control_primitives import load_control_primitives\nclass SkillManager:\n    def __init__(\n        self,\n        model_name=\"gpt-3.5-turbo\",\n        temperature=0,\n        retrieval_top_k=5,\n        request_timout=120,\n        ckpt_dir=\"ckpt\",\n        resume=False,\n    ):\n        self.llm = ChatOpenAI(\n            model_name=model_name,\n            temperature=temperature,\n            request_timeout=request_timout,\n        )\n        U.f_mkdir(f\"{ckpt_dir}/skill/code\")\n        U.f_mkdir(f\"{ckpt_dir}/skill/description\")\n        U.f_mkdir(f\"{ckpt_dir}/skill/vectordb\")\n        # programs for env execution\n        self.control_primitives = load_control_primitives()\n        if resume:\n            print(f\"\\033[33mLoading Skill Manager from {ckpt_dir}/skill\\033[0m\")"
        },
        {
            "comment": "The code initializes a SkillManager instance with skills loaded from a JSON file or an empty dictionary if none exists, sets retrieval_top_k and ckpt_dir attributes, creates a Chroma VectorDB with OpenAIEmbeddings, and asserts that the number of skills in the VectorDB matches the length of the skills.json file. It also provides a program property that returns programs from the skills.json file and control primitives.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/skill.py\":34-56",
            "content": "            self.skills = U.load_json(f\"{ckpt_dir}/skill/skills.json\")\n        else:\n            self.skills = {}\n        self.retrieval_top_k = retrieval_top_k\n        self.ckpt_dir = ckpt_dir\n        self.vectordb = Chroma(\n            collection_name=\"skill_vectordb\",\n            embedding_function=OpenAIEmbeddings(),\n            persist_directory=f\"{ckpt_dir}/skill/vectordb\",\n        )\n        assert self.vectordb._collection.count() == len(self.skills), (\n            f\"Skill Manager's vectordb is not synced with skills.json.\\n\"\n            f\"There are {self.vectordb._collection.count()} skills in vectordb but {len(self.skills)} skills in skills.json.\\n\"\n            f\"Did you set resume=False when initializing the manager?\\n\"\n            f\"You may need to manually delete the vectordb directory for running from scratch.\"\n        )\n    @property\n    def programs(self):\n        programs = \"\"\n        for skill_name, entry in self.skills.items():\n            programs += f\"{entry['code']}\\n\\n\"\n        for primitives in self.control_primitives:"
        },
        {
            "comment": "The code defines two functions: \"get_programs\" and \"add_new_skill\". The get_programs function generates a list of skills based on primitives, appends them to the programs variable with newline separators, and returns the final list. The add_new_skill function checks if a skill with the given name and code already exists. If it does, it deletes the existing skill and renames the current one to avoid conflicts before adding it to the database.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/skill.py\":57-79",
            "content": "            programs += f\"{primitives}\\n\\n\"\n        return programs\n    def add_new_skill(self, info):\n        if info[\"task\"].startswith(\"Deposit useless items into the chest at\"):\n            # No need to reuse the deposit skill\n            return\n        program_name = info[\"program_name\"]\n        program_code = info[\"program_code\"]\n        skill_description = self.generate_skill_description(program_name, program_code)\n        print(\n            f\"\\033[33mSkill Manager generated description for {program_name}:\\n{skill_description}\\033[0m\"\n        )\n        if program_name in self.skills:\n            print(f\"\\033[33mSkill {program_name} already exists. Rewriting!\\033[0m\")\n            self.vectordb._collection.delete(ids=[program_name])\n            i = 2\n            while f\"{program_name}V{i}.js\" in os.listdir(f\"{self.ckpt_dir}/skill/code\"):\n                i += 1\n            dumped_program_name = f\"{program_name}V{i}\"\n        else:\n            dumped_program_name = program_name\n        self.vectordb.add_texts("
        },
        {
            "comment": "This code is responsible for managing skills in a program, creating the necessary files and folders to store skill information such as code, description, and metadata. It uses VectorDB to persist data and U.dump functions to write text and JSON files. The `generate_skill_description` function generates a description based on the provided program name and code by passing it through the LLM with a system message loaded from \"load_prompt('skill')\". This function is used in skill creation or editing scenarios.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/skill.py\":80-107",
            "content": "            texts=[skill_description],\n            ids=[program_name],\n            metadatas=[{\"name\": program_name}],\n        )\n        self.skills[program_name] = {\n            \"code\": program_code,\n            \"description\": skill_description,\n        }\n        assert self.vectordb._collection.count() == len(\n            self.skills\n        ), \"vectordb is not synced with skills.json\"\n        U.dump_text(\n            program_code, f\"{self.ckpt_dir}/skill/code/{dumped_program_name}.js\"\n        )\n        U.dump_text(\n            skill_description,\n            f\"{self.ckpt_dir}/skill/description/{dumped_program_name}.txt\",\n        )\n        U.dump_json(self.skills, f\"{self.ckpt_dir}/skill/skills.json\")\n        self.vectordb.persist()\n    def generate_skill_description(self, program_name, program_code):\n        messages = [\n            SystemMessage(content=load_prompt(\"skill\")),\n            HumanMessage(\n                content=program_code\n                + \"\\n\\n\"\n                + f\"The main function is `{program_name}`.\""
        },
        {
            "comment": "This code snippet defines a method in the Voyager/voyager/agents/skill.py file responsible for retrieving skills based on query. It uses vector database similarity search to find top K skills and returns their corresponding codes. The process involves printing status messages during skill retrieval, with potential error handling for cases where no results are found or the retrieved skills' names are not present in the skills dictionary.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/agents/skill.py\":108-126",
            "content": "            ),\n        ]\n        skill_description = f\"    // { self.llm(messages).content}\"\n        return f\"async function {program_name}(bot) {{\\n{skill_description}\\n}}\"\n    def retrieve_skills(self, query):\n        k = min(self.vectordb._collection.count(), self.retrieval_top_k)\n        if k == 0:\n            return []\n        print(f\"\\033[33mSkill Manager retrieving for {k} skills\\033[0m\")\n        docs_and_scores = self.vectordb.similarity_search_with_score(query, k=k)\n        print(\n            f\"\\033[33mSkill Manager retrieved skills: \"\n            f\"{', '.join([doc.metadata['name'] for doc, _ in docs_and_scores])}\\033[0m\"\n        )\n        skills = []\n        for doc, _ in docs_and_scores:\n            skills.append(self.skills[doc.metadata[\"name\"]][\"code\"])\n        return skills"
        }
    ]
}