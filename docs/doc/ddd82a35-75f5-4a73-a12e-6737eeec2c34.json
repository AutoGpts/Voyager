{
    "summary": "Function `waitForMobRemoved` waits for entity removal, stops attacking on timeout, resolves with item or rejects with error using event listeners.",
    "details": [
        {
            "comment": "Function waitForMobRemoved sets up a timeout to check if a specified entity is removed, handling entityRemoved event, stops attacking when timeout ends, and notifies upon successful removal.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/control_primitives/waitForMobRemoved.js\":0-30",
            "content": "function waitForMobRemoved(bot, entity, timeout = 300) {\n    return new Promise((resolve, reject) => {\n        let success = false;\n        let droppedItem = null;\n        // Set up timeout\n        const timeoutId = setTimeout(() => {\n            success = false;\n            bot.pvp.stop();\n        }, timeout * 1000);\n        // Function to handle entityRemoved event\n        function onEntityGone(e) {\n            if (e === entity) {\n                success = true;\n                clearTimeout(timeoutId);\n                bot.chat(`Killed ${entity.name}!`);\n                bot.pvp.stop();\n            }\n        }\n        function onItemDrop(item) {\n            if (entity.position.distanceTo(item.position) <= 1) {\n                droppedItem = item;\n            }\n        }\n        function onStoppedAttacking() {\n            clearTimeout(timeoutId);\n            bot.removeListener(\"entityGone\", onEntityGone);\n            bot.removeListener(\"stoppedAttacking\", onStoppedAttacking);\n            bot.removeListener(\"itemDrop\", onItemDrop);"
        },
        {
            "comment": "This code sets up a timeout and event listeners to wait for the entity to be killed. It resolves with the dropped item if successful, or rejects with an error if it fails. The `onEntityGone` function handles the \"entityRemoved\" event, and the `onItemDrop` function handles the \"itemDrop\" event.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/control_primitives/waitForMobRemoved.js\":31-64",
            "content": "            if (!success) reject(new Error(`Failed to kill ${entity.name}.`));\n            else resolve(droppedItem);\n        }\n        // Listen for entityRemoved event\n        bot.on(\"entityGone\", onEntityGone);\n        bot.on(\"stoppedAttacking\", onStoppedAttacking);\n        bot.on(\"itemDrop\", onItemDrop);\n    });\n}\nfunction waitForMobShot(bot, entity, timeout = 300) {\n    return new Promise((resolve, reject) => {\n        let success = false;\n        let droppedItem = null;\n        // Set up timeout\n        const timeoutId = setTimeout(() => {\n            success = false;\n            bot.hawkEye.stop();\n        }, timeout * 1000);\n        // Function to handle entityRemoved event\n        function onEntityGone(e) {\n            if (e === entity) {\n                success = true;\n                clearTimeout(timeoutId);\n                bot.chat(`Shot ${entity.name}!`);\n                bot.hawkEye.stop();\n            }\n        }\n        function onItemDrop(item) {\n            if (entity.position.distanceTo(item.position) <= 1) {"
        },
        {
            "comment": "Function `waitForMobRemoved` uses event listeners to detect when an entity is removed, stopped auto shot, or an item is dropped. It resolves with the dropped item if successful, otherwise rejects with an error.",
            "location": "\"/media/root/Prima/works/Voyager/docs/src/voyager/control_primitives/waitForMobRemoved.js\":65-83",
            "content": "                droppedItem = item;\n            }\n        }\n        function onAutoShotStopped() {\n            clearTimeout(timeoutId);\n            bot.removeListener(\"entityGone\", onEntityGone);\n            bot.removeListener(\"auto_shot_stopped\", onAutoShotStopped);\n            bot.removeListener(\"itemDrop\", onItemDrop);\n            if (!success) reject(new Error(`Failed to shoot ${entity.name}.`));\n            else resolve(droppedItem);\n        }\n        // Listen for entityRemoved event\n        bot.on(\"entityGone\", onEntityGone);\n        bot.on(\"auto_shot_stopped\", onAutoShotStopped);\n        bot.on(\"itemDrop\", onItemDrop);\n    });\n}"
        }
    ]
}